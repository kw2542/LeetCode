Q:
	Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

	get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
	set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Notes:
	The key to this problem is doing every operation in O(1) time or it will fail on strong test cases. The only way to do search in O(1) time, as far as I know, is Hashing. The simplest way to maintain a least used list is linked list. So, to combine both of them is the key. Thus we need a new data structure.